classdef Model < handle
%% MODEL

    % observable properties, listeners are notified on change
    properties (SetObservable = true)
        file = [];          % handle to the H5BM file
        filename = [];      % name of the H5BM file
        filepath = [];      % path to the H5BM file
        controllers;        % handle to all controllers
        pp = [];            % path to the program
        log;                % logging object
        parameters;         % general parameters
        Brillouin;          % parameters of the Brillouin measurement
        Fluorescence;       % parameters of the Fluorescence measurement
        modulus;            % parameters of the longitudinal modulus calculation
        density;            % parameters of the density
        Alignment;          % parameters of the spatial alignment for ODT and BM
        ODT;                % parameters of the ODT measurement
    end
    properties (Constant)
        programVersion = getProgramVersion();
        % Saved to evaluated data file
        defaultBrillouin = struct( ...
            'repetitions', {{}}, ...
            'repetition', struct ( ...
                'name', '0', ...
                'index', 1 ...
            ), ...
            'dimension', NaN, ...
            'shift', NaN, ...
            'date', '', ...
            'positions', struct( ...
                'x', [], ...
                'y', [], ...
                'z', [] ...
            ), ...
            'setup', struct( ...
                'theta', 0, ...
                'lambda', 532e-9 ...
            ) ...
        );
        defaultFluorescence = struct( ...
            'repetitions', {{}}, ...
            'repetition', struct ( ...
                'name', '0', ...
                'index', 1 ...
            ), ...
            'channel', 0, ...
            'indicate', true ...
        );
        defaultODT = struct( ...
            'repetitions', {{}}, ...
            'repetition', struct ( ...
                'name', '0', ...
                'index', 1 ...
            ), ...
            'data', NaN, ...
            'date', '', ...
            'maxProj', true, ...
            'zDepth', 0, ...
            'indicate', true, ...
            'positions', struct( ...
                'x', [], ...
                'y', [], ...
                'z', [] ...
            ) ...
        );
        defaultDensity = struct( ...
            'n0', 1.335, ...        % [1]    refractive index of PBS
            'alpha', 0.18, ...      % [ml/g] refraction increment
            'rho0', 1, ...          % [g/ml] density of PBS
            'useDryDensity', false, ...    % [boolean] whether the absolute density of the dry mass should be considered
            'rho_dry', 1.35, ...    % [g/ml] absolute density of the dry fraction, 1/rho_dry = \bar{\nu}_\mathrm{dry} in
            ...                     %        https://doi.org/10.1016/j.bpj.2018.07.027
            'rho', NaN ...
        );
        defaultModulus = struct( ...
            'M', NaN, ...
            'M_woRI', NaN ...
        );
        defaultAlignment = struct( ...
            'position', struct( ...
                'x', [], ...
                'y', [], ...
                'z', [] ...
            ), ...
            'dx', 0, ...            % [µm]   shift in x-direction
            'dy', 0, ...            % [µm]   shift in y-direction
            'dz', 0, ...            % [µm]   shift in z-direction
            'coeff', NaN ...        % [1]    correlation coefficients
        );
        defaultParameters = struct( ...
            'magnification', 57, ...    % [1]   microscope magnification
            'pixelSize', 4.8e-6, ...    % [µm]  camera pixel size
            'xlim', [NaN NaN], ...
            'ylim', [NaN NaN] ...
        );
    end

    methods
        function obj = Model()
            obj.Brillouin = obj.defaultBrillouin();
            obj.Fluorescence = obj.defaultFluorescence();
            obj.ODT = obj.defaultODT();
            obj.density = obj.defaultDensity();
            obj.modulus = obj.defaultModulus();
            obj.Alignment = obj.defaultAlignment();
            obj.parameters = obj.defaultParameters();
        end
        %% Function to reset the model
        function reset(obj)
            obj.file = [];
            obj.Brillouin = obj.defaultBrillouin();
            obj.Fluorescence = obj.defaultFluorescence();
            obj.ODT = obj.defaultODT();
            obj.density = obj.defaultDensity();
            obj.modulus = obj.defaultModulus();
            obj.Alignment = obj.defaultAlignment();
            obj.parameters = obj.defaultParameters();
        end
    end
end

function programVersion = getProgramVersion()
    %% check if git commit can be found
    commit = '';
    cleanRepo = 'False';
    fp = mfilename('fullpath');
    [path,~,~] = fileparts(fp);
    try
        if ispc
            [status,com] = system(['git -C "' path '" log -n 1 --format=format:%H']);
            if ~status
                commit = com;
            end
            [status,clean] = system(['git -C "' path '" ls-files --exclude-standard -d -m -o -k']);
            if ~status
                cleanRepo = isempty(clean);
            end
        else
            commit = 'Could not determine commit.';
            cleanRepo = 'unknown';
        end
    catch
        commit = 'Could not determine commit.';
        cleanRepo = 'unknown';
        % program folder does not contain git folder
    end

    programVersion = struct( ...
        'major', 0, ...
        'minor', 0, ...
        'patch', 1, ...
        'preRelease', 'alpha', ...
        'commit', commit, ...
        'cleanRepo', cleanRepo, ...
        'website', 'https://github.com/BrillouinMicroscopy/FOBVisualizer', ...
        'author', 'Raimund Schlüßler', ...
        'email', 'raimund.schluessler@tu-dresden.de', ...
        'link', ['https://github.com/BrillouinMicroscopy/FOBVisualizer/commit/' commit] ...
    );     % version of the evaluation program
end